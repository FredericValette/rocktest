# If the name starts with ".", it will be put "as is" in the caller context
# else, the name of the module is added
# Here : the variable will be "libWithReturn.fromLib" in the caller context
- type: return
  value: fromLib = It comes from the library

- type: call
  value: module/sublibWithReturn

- type: return
  value: fromSubLib = ${sublibWithReturn.fromSubLib}

# If the name starts with ".", it will be put "as is" in the caller context
# Here : the variable will be "rock" in the caller context
- type: return
  name: .rock
  value: nroll
