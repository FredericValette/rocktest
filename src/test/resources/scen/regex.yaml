# Basic test : match

- step: regex.match
  params:
    pattern: ro.k
    string: rock

- step: assert.equals
  desc: Basic regex check - match
  params:
    expected: true
    actual: ${match.match}

# Basic test : no match

- step: regex.match
  params:
    pattern: ro.k
    string: rocK

- step: assert.equals
  desc: Basic regex check - no match
  params:
    expected: false
    actual: ${match.match}

# Extraction

- step: regex.match
  params:
    string: I love INXS and Mick Jagger but not XX
    pattern: I love (.*) and (.*) but not (.*)

- step: assert.equals
  desc: Extraction
  params:
    expected: true
    actual: ${match.match}

- step: assert.equals
  desc: Extraction
  params:
    expected: INXS
    actual: ${match.1}

- step: assert.equals
  desc: Extraction
  params:
    expected: Mick Jagger
    actual: ${match.2}

- step: assert.equals
  desc: Extraction
  params:
    expected: XX
    actual: ${match.3}

# Extraction with unset group

- step: regex.match
  params:
    string: I love INXS but not XX
    pattern: I love (.*) (?:and (.*) )?but not (.*)

- step: assert.equals
  desc: Extraction
  params:
    expected: true
    actual: ${match.match}

- step: assert.equals
  desc: Extraction
  params:
    expected: INXS
    actual: ${match.1}

- step: assert.equals
  desc: Extraction with unset variable
  params:
    expected: unset
    actual: ${match.2::unset}

- step: assert.equals
  desc: Extraction
  params:
    expected: XX
    actual: ${match.3}

# Inline syntax

- step: assert.equals
  desc: Inline syntax
  params:
    expected: Mark
    actual: ${$regex.match(I love (.*) and (.*),I love Bruce and Mark).2}
